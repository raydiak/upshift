The syntax is as follows:

- All text is parsed as plain literal characters until a "^" is encountered.

- "^^" represents a single literal "^" character.

- Within any ^ sequence, even an escaped escape or quote, whitespace is
  optional in most places except between literals. Put another way, places
  where you might, in other languages, be used to putting a comma after a term
  or a required space or punctuation after a keyword, are required whitespace
  in Upshift, and other whitespace around Upshift-syntactic characters like ^,
  ?, !, ; is valid, optional, and ignored. Whitespace outside of an Upshift
  expression or inside of a quote/upquote is always taken literally.

- The final closing marker in most Upshift escapes and literals may be omitted
  at the end of the file. See projects/example/src/index.html.up for an
  example. This includes (but may not be limited to) the terminating ; of an
  Upshift statement as well as any closing quote or upquote of a literal within
  a statement. Multiple such delimiters may be omitted as long as they all fall
  at the end of the file. The aforementioned example omits both the "^)" at the
  end of the 'body' value, and the ; at the end of the 'page.up' insertion
  which comprises the whole file.

Upshift Literals (inside ^ statements):

To write an explicit string within an Upshift sequence, the following forms are
supported. In addition, any Upshift escape (described later) may itself be used
as a value within another Upshift sequence.

    foo
        - Bare unquoted literal, maximal berevity
        - All letters and numbers are allowed as well as . / \ - and _

    'foo' (or "foo")
        - Quoted, allows whitespace and other special characters
        - ^' escapes a quote to insert a "'" in a quoted string
        - ^^ escapes a ^
        - Any other ^ is invalid, and any other ' ends the literal
        - The rules for double quotes ("") are the same as single quotes, they
          don't indicate any special processing or interpolation as in some
          other languages like Perl; use upquotes (below) for that

    ^(foo^)
        - Inserts a subdefinition in the same format as a standalone template
        - We call this "upquoted"
        - Same escaping rules as the mainline/top level of the template

    "key: "^value; (or any other combination)
        - All literal forms and escapes may be joined/concatenated by omitting
          the otherwise-required whitespace in between them
        - We call this a "compound literal"
        - Semantically equivalent to an upquote (above)

Insertion of vars/params/templates/files:

Names are currently looked up in a rather static way, first as parameters
passed in from an insertion call, then from the root of src and lib in that
order, stopping at the first defined value it finds. No name mangling is
applied, so for example to refer to a template file named
"lib/site/nav.html.up" the corresponding name would be "site/nav.html.up".

    ^name;
        - Inserts the value of the symbol "name"

    ^name param val;
        - Inserts the value of the symbol name, passing it a parameter named
          "param" with the value "val"
        - Name, param and value all may be any literal or nested Upshift
          statement, though the param (its name, not its value) might not
          always work as an Upshift statement yet

    ^ ^metaname; param val ;
        - Remember that "^^" represents a single literal "^", so a space is
          required between the two "^"s to start the name of an insertion call
          with another Upshift sequence

    ^ ^metaname; ;
        - Also remember to close both inner and outer nested escapes with their
          own separate ";"s

    ^= param val ^(parameter value: ^param;^);
        - Calls the last value passed to it as a literal with the given
          parameters. This stands in contrast to normal symbolic insertion,
          which calls the first value passed as a symbolic name
        - Put another way, the parameters come before the invocant, which is
          treated as the body to insert directly instead of looked up as a name
        - We call this a "subcall" because it is a call with reduced
          indirection, and because it effectively allows defining subtemplates
          with their own parameter scopes within a main template file
        - The parameters come first for the same reason "=" is chosen as the
          syntax: the intended use is to define named values for reuse or
          abbreviation in a larger body, without being forced to put anything
          into a separate file with a separate name. In this role it is often
          convenient to use an unclosed upquote, which requires it to come last
            - In fact this provides a syntax for defining names within the
              scope of the current file just by starting the template with a
              line like "^= param val ^(" and forgetting that the rest of the
              file is in a nested call at all
        - There is ordinarily no semantic point in subcalling a constant
          literal string which takes no parameters, but it is allowed

Conditionals:

    ^?name bar;
        - Inserts bar if the symbol "name"'s value is not ''
        - Name is any literal or escape as in insertion (described previously)

    ^?name foo bar;
        - Inserts bar if the symbol "name"'s value is "foo"

    ^?name foo foo ! bar bar ! ^name; ;
        - If name's value is "foo", insert literal "foo"; else if name is bar,
          insert "bar", else insert the value of the "name" symbol
